generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  Public
  Municipality
  Intercommunality
  Prefecture
  SubPrefecture
  Administrator
}

enum UserStatus {
  // Can signin
  Active
  // Is awaiting admin authorization
  Pending
  // Cannot signin temporarily for security reasons
  Suspended
  // Has not been allowed by admin to signin
  Rejected
}

model User {
  id            String     @id @default(uuid()) @db.Uuid
  firstName     String?
  lastName      String?
  name          String?
  email         String     @unique
  emailVerified DateTime?
  // User has seen onboarding info and acknowledged it
  onboarded     DateTime?
  image         String?
  location      String?
  title         String?
  description   String?
  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
  status        UserStatus

  created                      DateTime                      @default(now())
  updated                      DateTime                      @default(now())
  createdProjects              Project[]
  createdProjectNotes          ProjectNote[]
  municipalityAccessLevels     MunicipalityAccessLevel[]
  intercommunalityAccessLevels IntercommunalityAccessLevel[]
  districtAccessLevels         DistrictAccessLevel[]
  countyAccessLevels           CountyAccessLevel[]
}

enum AccessLevel {
  Owner
  Write
  Read
}

model MunicipalityAccessLevel {
  userId           String       @db.Uuid
  user             User         @relation(fields: [userId], references: [id])
  level            AccessLevel
  municipalityCode String
  municipality     Municipality @relation(fields: [municipalityCode], references: [code])
  created          DateTime     @default(now())
  updated          DateTime     @default(now())

  @@id([userId, municipalityCode])
}

model IntercommunalityAccessLevel {
  userId               String           @db.Uuid
  user                 User             @relation(fields: [userId], references: [id])
  level                AccessLevel
  intercommunalityCode String
  intercommunality     Intercommunality @relation(fields: [intercommunalityCode], references: [code])
  created              DateTime         @default(now())
  updated              DateTime         @default(now())

  @@id([userId, intercommunalityCode])
}

model DistrictAccessLevel {
  userId       String      @db.Uuid
  user         User        @relation(fields: [userId], references: [id])
  level        AccessLevel
  districtCode String
  district     District    @relation(fields: [districtCode], references: [code])
  created      DateTime    @default(now())
  updated      DateTime    @default(now())

  @@id([userId, districtCode])
}

model CountyAccessLevel {
  userId     String      @db.Uuid
  user       User        @relation(fields: [userId], references: [id])
  level      AccessLevel
  countyCode String
  county     County      @relation(fields: [countyCode], references: [code])
  created    DateTime    @default(now())
  updated    DateTime    @default(now())

  @@id([userId, countyCode])
}

model PreRegistration {
  email String   @id
  role  UserRole

  municipalityCode String?
  municipality     Municipality? @relation(fields: [municipalityCode], references: [code])

  countyCode String?
  county     County? @relation(fields: [countyCode], references: [code])

  districtCode String?
  district     District? @relation(fields: [districtCode], references: [code])

  intercommunalityCode String?
  intercommunality     Intercommunality? @relation(fields: [intercommunalityCode], references: [code])

  level       AccessLevel?
  allowSignup Boolean
  firstName   String?
  lastName    String?
  name        String?
  image       String?
  location    String?
  title       String?
  description String?
  created     DateTime     @default(now())
  updated     DateTime     @default(now())
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                  String            @id @db.Uuid
  reference           String            @unique
  name                String
  // Tax included
  totalAmount         Decimal
  categoryId          String
  category            ProjectCategory   @relation(fields: [categoryId], references: [id])
  secondaryCategories ProjectCategory[] @relation(name: "ProjectsSecondaryCategories")

  contactEmail String
  start        DateTime?    @db.Date
  end          DateTime?    @db.Date
  progress     String?
  description  String?
  attachments  Attachment[]
  created      DateTime     @default(now())
  createdBy    User?        @relation(fields: [createdById], references: [id])
  createdById  String?      @db.Uuid
  updated      DateTime     @default(now())

  // If implanted in municipality
  municipalityCode String?
  municipality     Municipality? @relation(fields: [municipalityCode], references: [code])

  // If implemented by intercommunality
  intercommunalityCode String?
  intercommunality     Intercommunality? @relation(fields: [intercommunalityCode], references: [code])

  artificializedArea         Int?
  greenhouseGasEmissions     Int?
  waterConsumption           Int?
  selectiveSortingPercentage Int?
  bikePathLength             Int?
  energyConsumption          Int?

  notes ProjectNote[]
}

// A working document attached to a project, privately owned by the structure that created it
// For now we attach it to User
model ProjectNote {
  id          String   @id @db.Uuid
  projectId   String   @db.Uuid
  project     Project  @relation(fields: [projectId], references: [id])
  createdById String   @db.Uuid
  createdBy   User     @relation(fields: [createdById], references: [id])
  content     String
  created     DateTime @default(now())
  updated     DateTime @default(now())
}

model Municipality {
  // Official code, not postal code, not SIREN code
  code                 String                    @id
  // Warning: Siren is not unique for a municipality in the current dataset
  siren                String
  intercommunality     Intercommunality          @relation(fields: [intercommunalityCode], references: [code])
  district             District                  @relation(fields: [districtCode], references: [code])
  name                 String
  projects             Project[]
  intercommunalityCode String
  districtCode         String
  accessLevels         MunicipalityAccessLevel[]
  preRegistrations     PreRegistration[]
}

// EPCI
model Intercommunality {
  // Insee SIREN code
  code             String                        @id
  crteCode         String
  crte             Crte                          @relation(fields: [crteCode], references: [code])
  name             String
  projects         Project[]
  municipalities   Municipality[]
  accessLevels     IntercommunalityAccessLevel[]
  preRegistrations PreRegistration[]
}

model Crte {
  // Code officiel
  code               String             @id
  name               String
  intercommunalities Intercommunality[]
}

// Arrondissement
// Sous-prefecture
model District {
  code             String                @id
  countyCode       String
  county           County                @relation(fields: [countyCode], references: [code])
  name             String
  municipalities   Municipality[]
  accessLevels     DistrictAccessLevel[]
  preRegistrations PreRegistration[]
}

// DÃ©partement
model County {
  // Official insee code
  code             String              @id
  name             String
  regionCode       String
  region           Region              @relation(fields: [regionCode], references: [code])
  districts        District[]
  accessLevels     CountyAccessLevel[]
  preRegistrations PreRegistration[]
}

model ProjectTheme {
  id         String            @id
  slug       String            @unique
  name       String
  categories ProjectCategory[]
}

model ProjectCategory {
  id                String       @id
  slug              String       @unique
  name              String
  themeId           String
  theme             ProjectTheme @relation(fields: [themeId], references: [id])
  projects          Project[]
  secondaryProjects Project[]    @relation(name: "ProjectsSecondaryCategories")
}

// Region
model Region {
  // Official insee code
  code   String   @id
  name   String
  County County[]
}

model Attachment {
  key       String   @id
  type      String
  name      String
  created   DateTime @default(now())
  projectId String   @db.Uuid
  project   Project  @relation(fields: [projectId], references: [id])
}
